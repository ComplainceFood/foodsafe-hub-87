
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vngmjjvfofoggfqgpizo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZuZ21qanZmb2ZvZ2dmcWdwaXpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4Nzk1NjYsImV4cCI6MjA1ODQ1NTU2Nn0.hKuiNWB9g90lklzXollw-O7-8kHCl33wKYmC5EW_sLI";

// Create the Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize storage bucket (if needed)
export const initializeStorage = async () => {
  try {
    console.log('Checking storage buckets...');
    
    // Check if attachments bucket exists
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error checking buckets:', error);
      return false;
    }
    
    const attachmentsBucket = buckets.find(bucket => bucket.name === 'attachments');
    
    if (!attachmentsBucket) {
      console.log('Attachments bucket not found in the list of buckets. Available buckets:', buckets.map(b => b.name).join(', '));
      console.log('Please ensure the "attachments" bucket is created in Supabase.');
      return false;
    }
    
    console.log('Attachments bucket exists:', attachmentsBucket);
    
    // Test access to the bucket
    try {
      const { data: testObject, error: testError } = await supabase.storage
        .from('attachments')
        .list('', { limit: 1 });
        
      if (testError) {
        console.error('Error accessing attachments bucket:', testError);
        return false;
      }
      
      console.log('Successfully accessed attachments bucket');
      return true;
    } catch (testErr) {
      console.error('Error testing access to attachments bucket:', testErr);
      return false;
    }
  } catch (err) {
    console.error('Error initializing storage:', err);
    return false;
  }
};

// Run initialization on load, but don't block
initializeStorage().then(success => {
  if (success) {
    console.log('Storage initialization successful');
  } else {
    console.warn('Storage initialization failed. Document uploads may not work correctly.');
  }
});
