
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vngmjjvfofoggfqgpizo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZuZ21qanZmb2ZvZ2dmcWdwaXpvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4Nzk1NjYsImV4cCI6MjA1ODQ1NTU2Nn0.hKuiNWB9g90lklzXollw-O7-8kHCl33wKYmC5EW_sLI";

// Create the Supabase client
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Initialize storage bucket (if needed)
(async () => {
  try {
    // Check if we need to create the attachments bucket
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error checking buckets:', error);
      return;
    }
    
    const attachmentsBucket = buckets.find(bucket => bucket.name === 'attachments');
    
    if (!attachmentsBucket) {
      console.log('Creating attachments bucket...');
      const { error: createError } = await supabase.storage.createBucket('attachments', {
        public: false,
        fileSizeLimit: 50 * 1024 * 1024, // 50MB limit
      });
      
      if (createError) {
        console.error('Error creating attachments bucket:', createError);
      } else {
        console.log('Attachments bucket created successfully.');
        
        // Set up a public RLS policy for the bucket
        // NOTE: In a production environment, you'll want more restrictive policies
        const { error: policyError } = await supabase.storage.from('attachments').createSignedUrl('dummy.txt', 10);
        if (policyError) {
          console.warn('Note: You may need to set up storage policies for the attachments bucket.');
        }
      }
    }
  } catch (err) {
    console.error('Error initializing storage:', err);
  }
})();

